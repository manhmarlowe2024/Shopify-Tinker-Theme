{% doc %}
  @prompt
    Create a before and after image comparison widget with an interactive slider that allows users to drag to reveal the after image. Include smooth animations, mobile touch support, and customizable styling options for the slider handle and overlay effects.
    Interactive drag slider
    customers can drag to reveal the transformation
    Smooth animations
    fluid transitions as users interact with the slider
    Mobile-friendly
    touch support for mobile devices
    Customizable styling
    adjust colors, handle design, and overlay effects
    Easy image upload
    simple interface to add your before/after images
    Perfect for showcasing product transformations on your Pickit Sports store! Once generated, you'll be able to upload your before and after images and customize the appearance to match your brand.
    
    
    
    

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .image-comparison-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .image-comparison-{{ ai_gen_id }} * {
    box-sizing: border-box;
  }

  .image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: {{ block.settings.aspect_ratio }};
  }

  .before-image-{{ ai_gen_id }},
  .after-image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .before-image-{{ ai_gen_id }} {
    z-index: 1;
  }

  .after-image-{{ ai_gen_id }} {
    z-index: 2;
    clip-path: polygon(0 0, 50% 0, 50% 100%, 0 100%);
    transition: clip-path 0.1s ease-out;
  }

  .image-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: {{ block.settings.placeholder_color }};
  }

  .image-placeholder-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    opacity: 0.5;
  }

  .slider-{{ ai_gen_id }} {
    position: absolute;
    z-index: 3;
    top: 0;
    left: 50%;
    width: {{ block.settings.divider_width }}px;
    height: 100%;
    background-color: {{ block.settings.divider_color }};
    transform: translateX(-50%);
    cursor: ew-resize;
  }

  .slider-handle-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    width: {{ block.settings.handle_size }}px;
    height: {{ block.settings.handle_size }}px;
    border-radius: 50%;
    background-color: {{ block.settings.handle_color }};
    border: {{ block.settings.handle_border_width }}px solid {{ block.settings.handle_border_color }};
    transform: translate(-50%, -50%);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .slider-handle-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    color: {{ block.settings.handle_arrow_color }};
  }

  .image-labels-{{ ai_gen_id }} {
    position: absolute;
    bottom: 10px;
    width: 100%;
    z-index: 4;
    display: flex;
    justify-content: space-between;
    padding: 0 10px;
    pointer-events: none;
  }

  .label-{{ ai_gen_id }} {
    background-color: {{ block.settings.label_background_color }};
    color: {{ block.settings.label_text_color }};
    padding: 5px 10px;
    border-radius: 4px;
    font-size: {{ block.settings.label_font_size }}px;
    font-weight: 500;
    opacity: 0.9;
  }

  .after-label-{{ ai_gen_id }} {
    margin-left: auto;
  }

  @media (max-width: 749px) {
    .slider-handle-{{ ai_gen_id }} {
      width: {{ block.settings.handle_size | times: 0.8 }}px;
      height: {{ block.settings.handle_size | times: 0.8 }}px;
    }
    
    .label-{{ ai_gen_id }} {
      font-size: {{ block.settings.label_font_size | times: 0.8 }}px;
      padding: 4px 8px;
    }
  }
{% endstyle %}

<image-comparison-slider-{{ ai_gen_id }} 
  class="image-comparison-{{ ai_gen_id }}" 
  {{ block.shopify_attributes }}
>
  <div class="image-wrapper-{{ ai_gen_id }}">
    {% if block.settings.before_image %}
      <img 
        src="{{ block.settings.before_image | image_url: width: 1500 }}" 
        alt="{{ block.settings.before_label | escape }}" 
        class="before-image-{{ ai_gen_id }}" 
        loading="lazy"
        width="{{ block.settings.before_image.width }}"
        height="{{ block.settings.before_image.height }}"
      >
    {% else %}
      <div class="image-placeholder-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
      </div>
    {% endif %}
    
    {% if block.settings.after_image %}
      <img 
        src="{{ block.settings.after_image | image_url: width: 1500 }}" 
        alt="{{ block.settings.after_label | escape }}" 
        class="after-image-{{ ai_gen_id }}" 
        loading="lazy"
        width="{{ block.settings.after_image.width }}"
        height="{{ block.settings.after_image.height }}"
      >
    {% else %}
      <div class="image-placeholder-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
      </div>
    {% endif %}
    
    <div class="slider-{{ ai_gen_id }}">
      <div class="slider-handle-{{ ai_gen_id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
          <polyline points="9 18 3 12 9 6"></polyline>
        </svg>
      </div>
    </div>
    
    {% if block.settings.show_labels %}
      <div class="image-labels-{{ ai_gen_id }}">
        <div class="label-{{ ai_gen_id }} before-label-{{ ai_gen_id }}">{{ block.settings.before_label }}</div>
        <div class="label-{{ ai_gen_id }} after-label-{{ ai_gen_id }}">{{ block.settings.after_label }}</div>
      </div>
    {% endif %}
  </div>
</image-comparison-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class ImageComparisonSlider extends HTMLElement {
      constructor() {
        super();
        this.slider = this.querySelector(`.slider-{{ ai_gen_id }}`);
        this.afterImage = this.querySelector(`.after-image-{{ ai_gen_id }}`);
        this.isDragging = false;
        this.initialPosition = 50; // Start at 50%
        
        this.boundHandleMouseDown = this.handleMouseDown.bind(this);
        this.boundHandleMouseMove = this.handleMouseMove.bind(this);
        this.boundHandleMouseUp = this.handleMouseUp.bind(this);
        this.boundHandleTouchStart = this.handleTouchStart.bind(this);
        this.boundHandleTouchMove = this.handleTouchMove.bind(this);
        this.boundHandleTouchEnd = this.handleTouchEnd.bind(this);
      }
      
      connectedCallback() {
        this.setupEventListeners();
        this.updateSliderPosition(this.initialPosition);
      }
      
      disconnectedCallback() {
        this.removeEventListeners();
      }
      
      setupEventListeners() {
        // Mouse events
        this.slider.addEventListener('mousedown', this.boundHandleMouseDown);
        this.addEventListener('mousedown', this.boundHandleMouseDown);
        
        // Touch events
        this.slider.addEventListener('touchstart', this.boundHandleTouchStart, { passive: true });
        this.addEventListener('touchstart', this.boundHandleTouchStart, { passive: true });
      }
      
      removeEventListeners() {
        // Mouse events
        this.slider.removeEventListener('mousedown', this.boundHandleMouseDown);
        this.removeEventListener('mousedown', this.boundHandleMouseDown);
        document.removeEventListener('mousemove', this.boundHandleMouseMove);
        document.removeEventListener('mouseup', this.boundHandleMouseUp);
        
        // Touch events
        this.slider.removeEventListener('touchstart', this.boundHandleTouchStart);
        this.removeEventListener('touchstart', this.boundHandleTouchStart);
        document.removeEventListener('touchmove', this.boundHandleTouchMove);
        document.removeEventListener('touchend', this.boundHandleTouchEnd);
      }
      
      handleMouseDown(e) {
        e.preventDefault();
        this.isDragging = true;
        
        document.addEventListener('mousemove', this.boundHandleMouseMove);
        document.addEventListener('mouseup', this.boundHandleMouseUp);
        
        // Calculate position immediately on click
        this.handleMouseMove(e);
      }
      
      handleMouseMove(e) {
        if (!this.isDragging) return;
        
        const rect = this.getBoundingClientRect();
        const position = ((e.clientX - rect.left) / rect.width) * 100;
        this.updateSliderPosition(position);
      }
      
      handleMouseUp() {
        this.isDragging = false;
        document.removeEventListener('mousemove', this.boundHandleMouseMove);
        document.removeEventListener('mouseup', this.boundHandleMouseUp);
      }
      
      handleTouchStart(e) {
        this.isDragging = true;
        
        document.addEventListener('touchmove', this.boundHandleTouchMove, { passive: false });
        document.addEventListener('touchend', this.boundHandleTouchEnd);
        
        // Calculate position immediately on touch
        this.handleTouchMove(e);
      }
      
      handleTouchMove(e) {
        if (!this.isDragging) return;
        
        e.preventDefault(); // Prevent scrolling while dragging
        
        const rect = this.getBoundingClientRect();
        const touch = e.touches[0];
        const position = ((touch.clientX - rect.left) / rect.width) * 100;
        this.updateSliderPosition(position);
      }
      
      handleTouchEnd() {
        this.isDragging = false;
        document.removeEventListener('touchmove', this.boundHandleTouchMove);
        document.removeEventListener('touchend', this.boundHandleTouchEnd);
      }
      
      updateSliderPosition(position) {
        // Constrain position between 0 and 100
        const constrainedPosition = Math.max(0, Math.min(100, position));
        
        // Update slider position
        this.slider.style.left = `${constrainedPosition}%`;
        
        // Update clip path of after image
        this.afterImage.style.clipPath = `polygon(0 0, ${constrainedPosition}% 0, ${constrainedPosition}% 100%, 0 100%)`;
      }
    }
    
    customElements.define('image-comparison-slider-{{ ai_gen_id }}', ImageComparisonSlider);
  })();
</script>

{% schema %}
{
  "name": "Before After Slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Images"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Aspect ratio",
      "options": [
        {
          "value": "1/1",
          "label": "1:1 (Square)"
        },
        {
          "value": "3/2",
          "label": "3:2"
        },
        {
          "value": "4/3",
          "label": "4:3"
        },
        {
          "value": "16/9",
          "label": "16:9"
        }
      ],
      "default": "4/3"
    },
    {
      "type": "header",
      "content": "Labels"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "label": "Show labels",
      "default": true
    },
    {
      "type": "text",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "range",
      "id": "label_font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Label font size",
      "default": 14
    },
    {
      "type": "color",
      "id": "label_background_color",
      "label": "Label background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "label_text_color",
      "label": "Label text color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Divider"
    },
    {
      "type": "range",
      "id": "divider_width",
      "min": 1,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Divider width",
      "default": 2
    },
    {
      "type": "color",
      "id": "divider_color",
      "label": "Divider color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Handle"
    },
    {
      "type": "range",
      "id": "handle_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Handle size",
      "default": 40
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Handle color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "handle_border_width",
      "min": 0,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Handle border width",
      "default": 2
    },
    {
      "type": "color",
      "id": "handle_border_color",
      "label": "Handle border color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "handle_arrow_color",
      "label": "Handle arrow color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "placeholder_color",
      "label": "Placeholder color",
      "default": "#f4f4f4"
    }
  ],
  "presets": [
    {
      "name": "Before After Slider"
    }
  ]
}
{% endschema %}